package com.sharpjvm.bytecode.util;

import com.sharpjvm.bytecode.constants.Constants;

/**
 * 操作命令工具类
 *
 * User: zhuguoyin
 * Date: 13-2-7
 * Time: 上午11:18
 * To change this template use File | Settings | File Templates.
 */
public class CommandUtil implements Constants {

    public static int getParameterByteCount(byte command) {
        switch (command) {
            case LDC:
                return 1;
            case LDC_W:
                return 1; // ?
            case LDC2_W:
                return 2;
            case INVOKE_VIRTUAL:
                return 2;
            case INVOKE_SPECIAL:
                return 2;
            case INVOKE_STATIC:
                return 2;
            case RETURN:
                return 0;
            case NOP:
            	return 0;
            case A_CONST_NULL:
            case I_CONST_M1:
            case I_CONST_0:
            case I_CONST_1:
            case I_CONST_2:
            case I_CONST_3:
            case I_CONST_4:
            case I_CONST_5:
            case L_CONST_0:
            case L_CONST_1:
            case F_CONST_0:
            case F_CONST_1:
            case F_CONST_2:
            case D_CONST_0:
            case D_CONST_1:
            	return 0;
            case BI_PUSH:
            	return 1;
            case SI_PUSH:
            	return 2;
            case I_LOAD:
            	return 1;
            case I_LOAD_0:
            case I_LOAD_1:
            case I_LOAD_2:
            case I_LOAD_3:
            	return 0;
            case ISTORE:
            	return 1;
            case ISTORE_0:
            case ISTORE_1:
            case ISTORE_2:
            case ISTORE_3:
            	return 0;
            case I_RETURN:
            case F_RETURN:
            case L_RETURN:
            case D_RETURN:
            case A_RETURN:
            	return 0;
            case F_LOAD:
            	return 1;
            case F_LOAD_0:
            case F_LOAD_1:
            case F_LOAD_2:
            case F_LOAD_3:
            	return 0;
            case L_LOAD:
            	return 1;
            case L_LOAD_0:
            case L_LOAD_1:
            case L_LOAD_2:
            case L_LOAD_3:
            	return 0;
            case D_LOAD:
            	return 1;
            case D_LOAD_0:
            case D_LOAD_1:
            case D_LOAD_2:
            case D_LOAD_3:
            	return 0;
            case A_LOAD:
            	return 1;
            case A_LOAD_0:
            case A_LOAD_1:
            case A_LOAD_2:
            case A_LOAD_3:
            	return 0;
            case A_A_LOAD:
            case I_A_LOAD:
            case L_A_LOAD:
            case F_A_LOAD:
            case D_A_LOAD:
            case B_A_LOAD:
            case C_A_LOAD:
            case S_A_LOAD:
            	return 0;
            case L_STORE:
            	return 1;
            case L_STORE_0:
            case L_STORE_1:
            case L_STORE_2:
            case L_STORE_3:
            	return 0;
            case F_STORE:
            	return 1;
            case F_STORE_0:
            case F_STORE_1:
            case F_STORE_2:
            case F_STORE_3:
            	return 0;
            case D_STORE:
            	return 1;
            case D_STORE_0:
            case D_STORE_1:
            case D_STORE_2:
            case D_STORE_3:
            	return 0;
            case A_STORE:
            	return 1;
            case A_STORE_0:
            case A_STORE_1:
            case A_STORE_2:
            case A_STORE_3:
            	return 0;
            case I_A_STORE:
            case L_A_STORE:
            case F_A_STORE:
            case D_A_STORE:
            case A_A_STORE:
            case B_A_STORE:
            case C_A_STORE:
            case S_A_STORE:
            	return 0;
            case POP:
            case POP2:
            	return 0;
            case DUP:
            case DUP2:
            case DUP2_X1:
            case DUP2_X2:
            case DUP_X1:
            case DUP_X2:
            	return 0;
            case I_ADD:
            case L_ADD:
            case F_ADD:
            case D_ADD:
            	return 0;
            case I_SUB:
            case L_SUB:
            case F_SUB:
            case D_SUB:
            	return 0;
            case I_MUL:
            case L_MUL:
            case F_MUL:
            case D_MUL:
            	return 0;
            case I_DIV:
            case L_DIV:
            case F_DIV:
            case D_DIV:
            	return 0;
            case I_REM:
            case L_REM:
            case F_REM:
            case D_REM:
            	return 0;
            case I_NEG:
            case L_NEG:
            case F_NEG:
            case D_NEG:
            	return 0;
            case I_SHL:
            case L_SHL:
            case I_SHR:
            case L_SHR:
            case I_U_SHR:
            case L_U_SHR:
            	return 0;
            case I_AND:
            case L_AND:
            case I_OR:
            case L_OR:
            case I_XOR:
            case L_XOR:
            	return 0;
            case I_INC:
            	return 2;
            case I2L:
            case I2F:
            case I2D:
            case L2I:
            case L2F:
            case L2D:
            case F2I:
            case F2L:
            case F2D:
            case D2I:
            case D2L:
            case D2F:
            case I2B:
            case I2C:
            case I2S:
            	return 0;
            case L_CMP:
            case F_CMP_L:
            case F_CMP_G:
            case D_CMP_L:
            case D_CMP_G:
            	return 0;
            case IF_EQ:
            case IF_NE:
            case IF_LT:
            case IF_GE:
            case IF_GT:
            case IF_LE:
            case IF_ICMP_EQ:
            case IF_ICMP_NE:
            case IF_ICMP_LT:
            case IF_ICMP_GE:
            case IF_ICMP_GT:
            case IF_ICMP_LE:
            case IF_ACMP_EQ:
            case IF_ACMP_NE:
            	return 2;
            case PUT_STATIC:
            case GET_FIELD:
            case PUT_FIELD:
            case GET_STATIC:
            	return 2;
            case INVOKE_INTERFACE:
            	return 4;
            case NEW:
            	return 2;
            case NEW_ARRAY:
            	return 1;
            case A_NEW_ARRAY:
            	return 2;
            case ARRAY_LENGTH:
            	return 0;
            case CHECK_CAST:
            	return 2;
            case INSTANCE_OF:
            	return 2;
            case IF_NULL:
            case IF_NON_NULL:
            	return 2;
            case GOTO:
            	return 2;
            default:
                return 0;
        }
    }

    public static String getDescription(byte command) {
        switch (command) {
            case GET_STATIC:
                return "GETSTATIC";
            case LDC:
                return "LDC";
            case INVOKE_VIRTUAL:
                return "INVOKEVIRTUAL";
            case INVOKE_SPECIAL:
                return "INVOKESPECIAL";
            case ALOAD_0:
                return "ALOAD_0";
            case RETURN:
                return "RETURN";
            case LDC_W:
                return "LDC_W"; // ?
            case LDC2_W:
                return "LDC2_W";
            case NOP:
            	return "NOP";
            case A_CONST_NULL:
            	return "A_CONST_NULL";
            case I_CONST_M1:
            	return "I_CONST_M1";
            case I_CONST_0:
            	return "I_CONST_0";
            case I_CONST_1:
            	return "I_CONST_1";
            case I_CONST_2:
            	return "I_CONST_2";
            case I_CONST_3:
            	return "I_CONST_3";
            case I_CONST_4:
            	return "I_CONST_4";
            case I_CONST_5:
            	return "I_CONST_5";
            case L_CONST_0:
            	return "L_CONST_0";
            case L_CONST_1:
            	return "L_CONST_1";
            case F_CONST_0:
            	return "F_CONST_0";
            case F_CONST_1:
            	return "F_CONST_1";
            case F_CONST_2:
            	return "F_CONST_2";
            case D_CONST_0:
            	return "D_CONST_0";
            case D_CONST_1:
            	return "D_CONST_1";
            case BI_PUSH:
            	return "BI_PUSH";
            case SI_PUSH:
            	return "SI_PUSH";
            case I_LOAD:
            	return "I_LOAD";
            case I_LOAD_0:
            	return "I_LOAD_0";
            case I_LOAD_1:
            	return "I_LOAD_1";
            case I_LOAD_2:
            	return "I_LOAD_2";
            case I_LOAD_3:
            	return "I_LOAD_3";
            case ISTORE:
            	return "ISTORE";
            case ISTORE_0:
            	return "ISTORE_0";
            case ISTORE_1:
            	return "ISTORE_1";
            case ISTORE_2:
            	return "ISTORE_2";
            case ISTORE_3:
            	return "ISTORE_3";
            case I_RETURN:
            	return "I_RETURN";
            case F_RETURN:
            	return "F_RETURN";
            case L_RETURN:
            	return "L_RETURN";
            case D_RETURN:
            	return "D_RETURN";
            case A_RETURN:
            	return "A_RETURN";
            case F_LOAD:
            	return "F_LOAD";
            case F_LOAD_0:
            	return "F_LOAD_0";
            case F_LOAD_1:
            	return "F_LOAD_1";
            case F_LOAD_2:
            	return "F_LOAD_2";
            case F_LOAD_3:
            	return "F_LOAD_3";
            case L_LOAD:
            	return "L_LOAD";
            case L_LOAD_0:
            	return "L_LOAD_0";
            case L_LOAD_1:
            	return "L_LOAD_1";
            case L_LOAD_2:
            	return "L_LOAD_2";
            case L_LOAD_3:
            	return "L_LOAD_3";
            case D_LOAD:
            	return "D_LOAD";
            case D_LOAD_0:
            	return "D_LOAD_0";
            case D_LOAD_1:
            	return "D_LOAD_1";
            case D_LOAD_2:
            	return "D_LOAD_2";
            case D_LOAD_3:
            	return "D_LOAD_3";
            case A_LOAD:
            	return "A_LOAD";
            case A_LOAD_1:
            	return "A_LOAD_1";
            case A_LOAD_2:
            	return "A_LOAD_2";
            case A_LOAD_3:
            	return "A_LOAD_3";
            case A_A_LOAD:
            	return "A_A_LOAD";
            case I_A_LOAD:
            	return "I_A_LOAD";
            case L_A_LOAD:
            	return "L_A_LOAD";
            case F_A_LOAD:
            	return "F_A_LOAD";
            case D_A_LOAD:
            	return "D_A_LOAD";
            case B_A_LOAD:
            	return "B_A_LOAD";
            case C_A_LOAD:
            	return "C_A_LOAD";
            case S_A_LOAD:
            	return "S_A_LOAD";
            case L_STORE:
            	return "L_STORE";
            case L_STORE_0:
            	return "L_STORE_0";
            case L_STORE_1:
            	return "L_STORE_1";
            case L_STORE_2:
            	return "L_STORE_2";
            case L_STORE_3:
            	return "L_STORE_3";
            case F_STORE:
            	return "F_STORE";
            case F_STORE_0:
            	return "F_STORE_0";
            case F_STORE_1:
            	return "F_STORE_1";
            case F_STORE_2:
            	return "F_STORE_2";
            case F_STORE_3:
            	return "F_STORE_3";
            case D_STORE:
            	return "D_STORE";
            case D_STORE_0:
            	return "D_STORE_0";
            case D_STORE_1:
            	return "D_STORE_1";
            case D_STORE_2:
            	return "D_STORE_2";
            case D_STORE_3:
            	return "D_STORE_3";
            case A_STORE:
            	return "A_STORE";
            case A_STORE_0:
            	return "A_STORE_0";
            case A_STORE_1:
            	return "A_STORE_1";
            case A_STORE_2:
            	return "A_STORE_2";
            case A_STORE_3:
            	return "A_STORE_3";
            case I_A_STORE:
            	return "I_A_STORE";
            case L_A_STORE:
            	return "L_A_STORE";
            case F_A_STORE:
            	return "F_A_STORE";
            case D_A_STORE:
            	return "D_A_STORE";
            case A_A_STORE:
            	return "A_A_STORE";
            case B_A_STORE:
            	return "B_A_STORE";
            case C_A_STORE:
            	return "C_A_STORE";
            case S_A_STORE:
            	return "S_A_STORE";
            case POP:
            	return "POP";
            case POP2:
            	return "POP2";
            case DUP:
            	return "DUP";
            case DUP2:
            	return "DUP2";
            case DUP2_X1:
            	return "DUP2_X1";
            case DUP2_X2:
            	return "DUP2_X2";
            case DUP_X1:
            	return "DUP_X1";
            case DUP_X2:
            	return "DUP_X2";
            case I_ADD:
            	return "I_ADD";
            case L_ADD:
            	return "L_ADD";
            case F_ADD:
            	return "F_ADD";
            case D_ADD:
            	return "D_ADD";
            case I_SUB:
            	return "I_SUB";
            case L_SUB:
            	return "L_SUB";
            case F_SUB:
            	return "F_SUB";
            case D_SUB:
            	return "D_SUB";
            case I_MUL:
            	return "I_MUL";
            case L_MUL:
            	return "L_MUL";
            case F_MUL:
            	return "F_MUL";
            case D_MUL:
            	return "D_MUL";
            case I_DIV:
            	return "I_DIV";
            case L_DIV:
            	return "L_DIV";
            case F_DIV:
            	return "F_DIV";
            case D_DIV:
            	return "D_DIV";
            case I_REM:
            	return "I_REM";
            case L_REM:
            	return "L_REM";
            case F_REM:
            	return "F_REM";
            case D_REM:
            	return "D_REM";
            case I_NEG:
            	return "I_NEG";
            case L_NEG:
            	return "L_NEG";
            case F_NEG:
            	return "F_NEG";
            case D_NEG:
            	return "D_NEG";
            case I_SHL:
            	return "I_SHL";
            case L_SHL:
            	return "L_SHL";
            case I_SHR:
            	return "I_SHR";
            case L_SHR:
            	return "L_SHR";
            case I_U_SHR:
            	return "I_U_SHR";
            case L_U_SHR:
            	return "L_U_SHR";
            case I_AND:
            	return "I_AND";
            case L_AND:
            	return "L_AND";
            case I_OR:
            	return "I_OR";
            case L_OR:
            	return "L_OR";
            case I_XOR:
            	return "I_XOR";
            case L_XOR:
            	return "L_XOR";
            case I_INC:
            	return "I_INC";
            case I2L:
            	return "I2L";
            case I2F:
            	return "I2F";
            case I2D:
            	return "I2D";
            case L2I:
            	return "L2I";
            case L2F:
            	return "L2F";
            case L2D:
            	return "L2D";
            case F2I:
            	return "F2I";
            case F2L:
            	return "F2L";
            case F2D:
            	return "F2D";
            case D2I:
            	return "D2I";
            case D2L:
            	return "D2L";
            case D2F:
            	return "D2F";
            case I2B:
            	return "I2B";
            case I2C:
            	return "I2C";
            case I2S:
            	return "I2S";
            case L_CMP:
            	return "L_CMP";
            case F_CMP_L:
            	return "F_CMP_L";
            case F_CMP_G:
            	return "F_CMP_G";
            case D_CMP_L:
            	return "D_CMP_L";
            case D_CMP_G:
            	return "D_CMP_G";
            case IF_EQ:
            	return "IF_EQ";
            case IF_NE:
            	return "IF_NE";
            case IF_LT:
            	return "IF_LT";
            case IF_GE:
            	return "IF_GE";
            case IF_GT:
            	return "IF_GT";
            case IF_LE:
            	return "IF_LE";
            case IF_ICMP_EQ:
            	return "IF_ICMP_EQ";
            case IF_ICMP_NE:
            	return "IF_ICMP_NE";
            case IF_ICMP_LT:
            	return "IF_ICMP_LT";
            case IF_ICMP_GE:
            	return "IF_ICMP_GE";
            case IF_ICMP_GT:
            	return "IF_ICMP_GT";
            case IF_ICMP_LE:
            	return "IF_ICMP_LE";
            case IF_ACMP_EQ:
            	return "IF_ACMP_EQ";
            case IF_ACMP_NE:
            	return "IF_ACMP_NE";
            case PUT_STATIC:
            	return "PUT_STATIC";
            case GET_FIELD:
            	return "GET_FIELD";
            case PUT_FIELD:
            	return "PUT_FIELD";
            case INVOKE_INTERFACE:
            	return "INVOKE_INTERFACE";
            case NEW:
            	return "NEW";
            case NEW_ARRAY:
            	return "NEW_ARRAY";
            case A_NEW_ARRAY:
            	return "A_NEW_ARRAY";
            case ARRAY_LENGTH:
            	return "ARRAY_LENGTH";
            case CHECK_CAST:
            	return "CHECK_CAST";
            case INSTANCE_OF:
            	return "INSTANCE_OF";
            case IF_NULL:
            	return "IF_NULL";
            case IF_NON_NULL:
            	return "IF_NON_NULL";
            case GOTO:
            	return "GOTO";
            case INVOKE_STATIC:
                return "INVOKE_STATIC";
            default:
                return "unknown";
        }
    }
}
